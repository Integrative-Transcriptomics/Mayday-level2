package mayday.jsc.shell;

import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.ResultSet;

import javax.script.ScriptEngine;
import javax.script.ScriptException;

import mayday.jsc.adjustableBehaviour.JSOverloadingOperators;
import mayday.jsc.adjustableBehaviour.JSReplacements;
import mayday.jsc.recognition.JSCommandRecognizer;
import mayday.mushell.dispatch.AbstractDispatcher;


/** 
 * Preparation and execution of JS commands 
 *
 * @version 1.0
 * @author Tobias Ries, ries@yuricon.de
 */
public class JSDispatcher extends AbstractDispatcher
{
	private ScriptEngine engine;	
	private CharArrayWriter writer;
	private Thread dispatchThread;
	private ResultSet result;
	private JSReplacements replacer;
	private JSOverloadingOperators overloadingOps;		
	private JSMeta meta;

	public JSDispatcher(ScriptEngine scriptEngine,
						JSReplacements replace,
						JSOverloadingOperators overloadingOperators,
						JSCommandRecognizer cmdRecognizer)
	{		
		
		this.engine = scriptEngine;	
		this.overloadingOps = overloadingOperators;
		this.replacer = replace;
		this.meta = new JSMeta(this, cmdRecognizer, replace);

		//Set Writer (output)
		this.engine.getContext().setWriter(new PrintWriter(this.writer = new CharArrayWriter(), true));
		
        this.result=null;                
	}
	
	protected JSOverloadingOperators getOverloadingOps()
	{
		return this.overloadingOps;
	}
	protected JSReplacements getReplacements()
	{
		return this.replacer;
	}
	
	public ScriptEngine getScriptEngine()
	{
		return this.engine;	
	}
		
	public String getName()
	{
		return "Mayday JSC";
	}

	public ResultSet getRes()
	{
		return result;
	}		
	
	/*
	 * There seems to be no better way (no other way) then using "stop"
	 * to forcefully end the current evaluation.
	 */
	@SuppressWarnings("deprecation")
	public void kill()
	{
		if(this.dispatchThread != null && !this.ready())
		{
			try
			{
				dispatchThread.stop();
			}
			catch(Exception e){};
			println("Warning: Action forcefully stopped.");
			this.setReady(true);
		}
	}	
	
	@Override
	public Boolean dispatchCommandImpl(final String cmd) 
	{	
		this.setReady(false);								
		
		this.dispatchThread = new Thread(new Runnable()
		{
			public void run()
			{										
				String command = JSDispatcher.this.meta.executeMetaCommands(cmd);				
				command = replacer.applyReplacementRules(command);
				
				//'@NOOPERATORS' only allowed at beginning of script
				boolean nooperators = command.startsWith("@NOOPERATORS");		
				command = nooperators ? command.substring(12) : command;
				
				if(!nooperators)
					command = overloadingOps.applyOperators(command);
				
				try
				{					
					JSDispatcher.this.printOutput(engine.eval(command));												
				} catch (ScriptException e1) 
				{
					JSDispatcher.this.println(e1.getLocalizedMessage());
				}				
				if(writer.size() > 0)
				{
					JSDispatcher.this.println(writer.toString());
					JSDispatcher.this.writer.reset();
				}			
				JSDispatcher.this.setReady(true);				
			}
		});
		
		dispatchThread.start();		
			
		return null;
	}
	
	/**
	 * Load and evaluate script from a file
	 * @param filePath path to file containing js
	 * @throws ScriptException if Script in file is corrupt
	 */
	public void evalFile(String filePath) throws ScriptException
	{
		try
		{
			String script = ToolBox.readFile(filePath);				
			super.dispatchCommand(script);		
		} catch (IOException e) {				
			println("File not found: "+filePath);
		}	
	}
	
	/**
	 * Processes output and outputs it to console 
	 * @param output Object generated by ScriptEngines eval-Method
	 */
	protected void printOutput(Object output)
	{
		if(output == null)
			return;
		if(output.getClass().isArray())
		{
			//Primitive types need to be handled separately
			if(output instanceof byte[])
				this.println(java.util.Arrays.toString((byte[])output));
			else if(output instanceof short[])
				this.println(java.util.Arrays.toString((short[])output));
			else if(output instanceof int[])
				this.println(java.util.Arrays.toString((int[])output));
			else if(output instanceof long[])
				this.println(java.util.Arrays.toString((long[])output));
			else if(output instanceof float[])
				this.println(java.util.Arrays.toString((float[])output));
			else if(output instanceof double[])
				this.println(java.util.Arrays.toString((double[])output));
			else if(output instanceof boolean[])
				this.println(java.util.Arrays.toString((boolean[])output));
			else if(output instanceof char[])				
				this.println(java.util.Arrays.toString((char[])output));
			else 
				this.println(java.util.Arrays.toString((Object[])output));			
		}
		else
			this.println(output.toString());
	}
	
}
	